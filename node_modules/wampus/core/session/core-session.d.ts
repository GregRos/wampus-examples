/**
 * @module core
 */
import { WampMessage } from "../protocol/messages";
import { HelloDetails, WelcomeDetails } from "../protocol/options";
import { WampProtocolClient } from "../routing/wamp-protocol-client";
import { CallTicket, RegistrationTicket, SubscriptionTicket } from "./ticket";
import { WampusCallArguments, WampusPublishArguments, WampusRegisterArguments, WampusSubcribeArguments } from "./message-arguments";
import { TransportFactory } from "../transport/transport";
import { AuthenticatorFunction } from "./authentication";
export interface CoreSessionConfig {
    realm: string;
    timeout: number;
    transport: TransportFactory;
    authenticator?: AuthenticatorFunction;
    helloDetails?(defaults: HelloDetails): void;
}
/**
 * The Wampus class that implements most WAMP session logic.
 * This class is usually used via a wrapper session that enriches the session object's functionality.
 */
export declare class WampusCoreSession {
    sessionId: number;
    config: CoreSessionConfig;
    protocol: WampProtocolClient<WampMessage.Any>;
    private _welcomeDetails;
    private _isClosing;
    constructor(never: never);
    readonly realm: string;
    readonly isActive: boolean;
    readonly details: WelcomeDetails;
    static create(config: CoreSessionConfig): Promise<WampusCoreSession>;
    /**
     * Registers a procedure and returns a registration ticket.
     * @param wArgs The arguments for registering the procedure, including the function that is invoked when the procedure is called.
     * @returns A promise that resolves with the ticket once the registration is successful.
     */
    register(wArgs: WampusRegisterArguments): Promise<RegistrationTicket>;
    /**
     * Publish an event to a topic.
     * @param wArgs All the arguments required
     */
    publish(wArgs: WampusPublishArguments): Promise<void>;
    /**
     * Subscribes to a topic and returns a subscription ticket that exposes an observable which will fire every time the subscription is triggered.
     * @param {WampSubscribeOptions} wArgs All the info necessary to subscribe to a topic.
     * @returns A promise that resolves with the subscription ticket when the subscription has been established.
     */
    topic(wArgs: WampusSubcribeArguments): Promise<SubscriptionTicket>;
    /**
     * Calls a WAMP procedure
     * @param wArgs All the arguments required to call a procedure.
     */
    call(wArgs: WampusCallArguments): CallTicket;
    close(): Promise<void>;
    private _throwCommonError;
    private _close$;
    private _abortDueToProtoViolation;
    private _closeRoutes$;
    private _handleClose$;
    private _abort$;
    private _goodbye$;
    private _handshake$;
    private _registerControlRoutes;
}
