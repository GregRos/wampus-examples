"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Set of URIs mentioned by the WAMP protocol.
 */
var WampUri;
(function (WampUri) {
    /**
     * Standard error URIs.
     */
    let Error;
    (function (Error) {
        Error["Prefix"] = "wamp.error";
        Error["NotAuthorized"] = "wamp.error.not_authorized";
        Error["ProcAlreadyExists"] = "wamp.error.procedure_already_exists";
        Error["ProtoViolation"] = "wamp.error.protocol_violation";
        Error["NoSuchRealm"] = "wamp.error.no_such_realm";
        Error["NoSuchSubscription"] = "wamp.error.no_such_subscription";
        Error["NoSuchRegistration"] = "wamp.error.no_such_registration";
        Error["NoSuchProcedure"] = "wamp.error.no_such_procedure";
        Error["InvalidUri"] = "wamp.error.invalid_uri";
        Error["InvalidArgument"] = "wamp.error.invalid_argument";
        Error["AuthFailed"] = "wamp.error.authorization_failed";
        Error["NoSuchRole"] = "wamp.error.no_such_role";
        Error["NoSuchSession"] = "wamp.error.no_such_session";
        // Advanced Profile
        Error["Canceled"] = "wamp.error.canceled";
        Error["OptionNotAllowed"] = "wamp.error.option_not_allowed";
        Error["NoEligibleCallee"] = "wamp.error.no_eligible_callee";
        Error["DisallowedDiscloseMe"] = "wamp.error.option_disallowed.disclose_me";
        Error["NetworkFailure"] = "wamp.error.network_failure";
        Error["RuntimeError"] = "wamp.error.runtime_error";
    })(Error = WampUri.Error || (WampUri.Error = {}));
    /**
     * Standard reasons for closing a session.
     */
    let CloseReason;
    (function (CloseReason) {
        CloseReason["GoodbyeAndOut"] = "wamp.close.goodbye_and_out";
        CloseReason["CloseRealm"] = "wamp.close.close_realm";
    })(CloseReason = WampUri.CloseReason || (WampUri.CloseReason = {}));
    let MetaApi;
    (function (MetaApi) {
        let Registration;
        (function (Registration) {
            let Event;
            (function (Event) {
                Event["OnRegister"] = "wamp.registration.on_register";
                Event["OnUnregister"] = "wamp.registration.on_unregister";
                Event["OnRegistrationDelete"] = "wamp.registration.on_delete";
            })(Event = Registration.Event || (Registration.Event = {}));
            let Procedure;
            (function (Procedure) {
                Procedure["List"] = "wamp.registration.list";
                Procedure["Lookup"] = "wamp.registration.lookup";
                Procedure["Match"] = "wamp.registration.match";
                Procedure["Get"] = "wamp.registration.get";
                Procedure["ListCallees"] = "wamp.registration.list_callees";
                Procedure["CountCallees"] = "wamp.registration.count_callees";
            })(Procedure = Registration.Procedure || (Registration.Procedure = {}));
        })(Registration = MetaApi.Registration || (MetaApi.Registration = {}));
        let Subscription;
        (function (Subscription) {
            let Procedure;
            (function (Procedure) {
                Procedure["List"] = "wamp.subscription.list";
                Procedure["Lookup"] = "wamp.subscription.lookup";
                Procedure["Match"] = "wamp.subscription.match";
                Procedure["Get"] = "wamp.subscription.get";
                Procedure["ListSubscribers"] = "wamp.subscription.list_subscribers";
                Procedure["CountSubscribers"] = "wamp.subscription.count_subscribers";
            })(Procedure = Subscription.Procedure || (Subscription.Procedure = {}));
            let Event;
            (function (Event) {
                Event["OnSubscribe"] = "wamp.subscription.on_subscribe";
                Event["OnUnsubscribe"] = "wamp.subscription.on_unsubscribe";
                Event["OnSubscriptionDelete"] = "wamp.subscription.on_delete";
            })(Event = Subscription.Event || (Subscription.Event = {}));
        })(Subscription = MetaApi.Subscription || (MetaApi.Subscription = {}));
        let History;
        (function (History) {
            let Procedures;
            (function (Procedures) {
                Procedures["Last"] = "wamp.topic.history.last";
                Procedures["Since"] = "wamp.topic.history.since";
                Procedures["After"] = "wamp.topic.history.after";
            })(Procedures = History.Procedures || (History.Procedures = {}));
        })(History = MetaApi.History || (MetaApi.History = {}));
        let Session;
        (function (Session) {
            let Events;
            (function (Events) {
                Events["OnJoin"] = "wamp.session.on_join";
                Events["OnLeave"] = "wamp.session.on_leave";
            })(Events = Session.Events || (Session.Events = {}));
            let Procedures;
            (function (Procedures) {
                Procedures["Count"] = "wamp.session.count";
                Procedures["List"] = "wamp.session.list";
                Procedures["Get"] = "wamp.session.get";
                Procedures["FlushTestaments"] = "wamp.session.flush_testaments";
            })(Procedures = Session.Procedures || (Session.Procedures = {}));
        })(Session = MetaApi.Session || (MetaApi.Session = {}));
    })(MetaApi = WampUri.MetaApi || (WampUri.MetaApi = {}));
})(WampUri = exports.WampUri || (exports.WampUri = {}));
var AdvProfile;
(function (AdvProfile) {
    let Call;
    (function (Call) {
        Call.ProgressReports = "ProgressiveCallResults";
        Call.CallTimeouts = "CallTimeout";
        Call.CallCancelling = "CallCancelling";
        Call.CallerIdentification = "CallerIdentification";
        Call.CallTrustLevels = "CallTrustLevels";
        Call.PatternRegistration = "PatternBasedRegistration";
        Call.SharedRegistration = "SharedRegistration";
    })(Call = AdvProfile.Call || (AdvProfile.Call = {}));
    let Subscribe;
    (function (Subscribe) {
        Subscribe.SubscriberBlackWhiteListing = "SubscriberBlackWhiteListing";
        Subscribe.PublisherIdentification = "PublisherIdentification";
        Subscribe.PublisherExclusion = "PublisherExclusion";
        Subscribe.PatternBasedSubscription = "PatternBasedSubscription";
    })(Subscribe = AdvProfile.Subscribe || (AdvProfile.Subscribe = {}));
})(AdvProfile = exports.AdvProfile || (exports.AdvProfile = {}));
//# sourceMappingURL=uris.js.map