"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const messages_1 = require("./messages");
/**
 * A helper class for creating commonly used message objects and embedding them with request IDs.
 */
class MessageFactory {
    constructor(_config) {
        this._config = _config;
    }
    hello(realm, details) {
        return new messages_1.WampMessage.Hello(realm, details);
    }
    abort(details, reason) {
        return new messages_1.WampMessage.Abort(details, reason);
    }
    call(options, procedure, args, kwargs) {
        return new messages_1.WampMessage.Call(this._config.requestId(), options || {}, procedure, args || [], kwargs || {});
    }
    publish(options, topic, args, kwargs) {
        return new messages_1.WampMessage.Publish(this._config.requestId(), options || {}, topic, args || [], kwargs || {});
    }
    subscribe(options, topic) {
        return new messages_1.WampMessage.Subscribe(this._config.requestId(), options || {}, topic);
    }
    unsubscribe(subscription) {
        return new messages_1.WampMessage.Unsubscribe(this._config.requestId(), subscription);
    }
    register(options, procedure) {
        return new messages_1.WampMessage.Register(this._config.requestId(), options || {}, procedure);
    }
    error(sourceType, requestId, details, reason, args, kwargs) {
        return new messages_1.WampMessage.Error(sourceType, requestId, details || {}, reason, args || [], kwargs || {});
    }
    unregister(registration) {
        return new messages_1.WampMessage.Unregister(this._config.requestId(), registration);
    }
    yield(invocationId, options, args, kwargs) {
        return new messages_1.WampMessage.Yield(invocationId, options || {}, args || [], kwargs || {});
    }
    cancel(callRequestId, options) {
        return new messages_1.WampMessage.Cancel(callRequestId, options || {});
    }
    authenticate(signature, options) {
        return new messages_1.WampMessage.Authenticate(signature, options || {});
    }
    goodbye(details, reason) {
        return new messages_1.WampMessage.Goodbye(details || {}, reason);
    }
    unregistered(reqId) {
        return new messages_1.WampMessage.Unregistered(reqId);
    }
    result(callReqId, details, args, kwargs) {
        return new messages_1.WampMessage.Result(callReqId, details || {}, args, kwargs);
    }
    registered(registerReqId) {
        return new messages_1.WampMessage.Registered(registerReqId, this._config.requestId());
    }
    challenge(authMethod, extra) {
        return new messages_1.WampMessage.Challenge(authMethod, extra);
    }
    subscribed(subscribeReqId) {
        return new messages_1.WampMessage.Subscribed(subscribeReqId, this._config.requestId());
    }
    event(subscriptionId, details, args, kwargs) {
        return new messages_1.WampMessage.Event(subscriptionId, this._config.requestId(), details || {}, args, kwargs);
    }
    invocation(registrationId, options, args, kwargs) {
        return new messages_1.WampMessage.Invocation(this._config.requestId(), registrationId, options || {}, args, kwargs);
    }
    welcome(details) {
        return new messages_1.WampMessage.Welcome(this._config.requestId(), details);
    }
    unsubscribed(unsubscribeReqId) {
        return new messages_1.WampMessage.Unsubscribed(unsubscribeReqId);
    }
}
exports.MessageFactory = MessageFactory;
//# sourceMappingURL=factory.js.map