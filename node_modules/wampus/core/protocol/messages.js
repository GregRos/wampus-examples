"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const message_type_1 = require("./message.type");
function argsKwargsArray(args, kwargs) {
    let hasKwargs = kwargs && Object.keys(kwargs).length > 0;
    let hasArgs = args && args.length > 0;
    if (!hasArgs && !hasKwargs) {
        return [];
    }
    else if (!hasArgs && hasKwargs) {
        return [[], kwargs];
    }
    else if (hasArgs && !hasKwargs) {
        return [args];
    }
    else {
        return [args, kwargs];
    }
}
/**
 * Namespace for all WAMP protocol message objects.
 */
var WampMessage;
(function (WampMessage) {
    /**
     * A class representing the CALL message.
     */
    class Call {
        constructor(requestId, options, procedure, args, kwargs) {
            this.requestId = requestId;
            this.options = options;
            this.procedure = procedure;
            this.args = args;
            this.kwargs = kwargs;
            this.type = message_type_1.WampType.CALL;
        }
        toTransportFormat() {
            let { args, kwargs } = this;
            return [this.type, this.requestId, this.options || {}, this.procedure, ...argsKwargsArray(args, kwargs)];
        }
    }
    WampMessage.Call = Call;
    /**
     * A class representing the ERROR message.
     */
    class Error {
        constructor(errSourceType, errSourceId, details, error, args, kwargs) {
            this.errSourceType = errSourceType;
            this.errSourceId = errSourceId;
            this.details = details;
            this.error = error;
            this.args = args;
            this.kwargs = kwargs;
            this.type = message_type_1.WampType.ERROR;
        }
        toTransportFormat() {
            return [this.type, this.errSourceType, this.errSourceId, this.details, this.error, this.args, this.kwargs];
        }
    }
    WampMessage.Error = Error;
    /**
     * A class representing the HELLO message.
     */
    class Hello {
        constructor(realm, details) {
            this.realm = realm;
            this.details = details;
            this.type = message_type_1.WampType.HELLO;
        }
        toTransportFormat() {
            return [this.type, this.realm, this.details];
        }
    }
    WampMessage.Hello = Hello;
    /**
     * A class representing the ABORT message.
     */
    class Abort {
        constructor(details, reason) {
            this.details = details;
            this.reason = reason;
            this.type = message_type_1.WampType.ABORT;
        }
        toTransportFormat() {
            return [this.type, this.details, this.reason];
        }
    }
    WampMessage.Abort = Abort;
    /**
     * A class representing the GOODBYE message.
     */
    class Goodbye {
        constructor(details, reason) {
            this.details = details;
            this.reason = reason;
            this.type = message_type_1.WampType.GOODBYE;
        }
        toTransportFormat() {
            return [this.type, this.details, this.reason];
        }
    }
    WampMessage.Goodbye = Goodbye;
    /**
     * A class representing the PUBLISH message.
     */
    class Publish {
        constructor(requestId, options, topic, args, kwargs) {
            this.requestId = requestId;
            this.options = options;
            this.topic = topic;
            this.args = args;
            this.kwargs = kwargs;
            this.type = message_type_1.WampType.PUBLISH;
        }
        toTransportFormat() {
            return [this.type, this.requestId, this.options, this.topic, ...argsKwargsArray(this.args, this.kwargs)];
        }
    }
    WampMessage.Publish = Publish;
    /**
     * A class representing the SUBSCRIBE message.
     */
    class Subscribe {
        constructor(requestId, options, topic) {
            this.requestId = requestId;
            this.options = options;
            this.topic = topic;
            this.type = message_type_1.WampType.SUBSCRIBE;
        }
        toTransportFormat() {
            return [this.type, this.requestId, this.options, this.topic];
        }
    }
    WampMessage.Subscribe = Subscribe;
    /**
     * A class representing the UNSUBSCRIBE message.
     */
    class Unsubscribe {
        constructor(requestId, subscription) {
            this.requestId = requestId;
            this.subscription = subscription;
            this.type = message_type_1.WampType.UNSUBSCRIBE;
        }
        toTransportFormat() {
            return [this.type, this.requestId, this.subscription];
        }
    }
    WampMessage.Unsubscribe = Unsubscribe;
    /**
     * A class representing the REGISTER message.
     */
    class Register {
        constructor(requestId, options, procedure) {
            this.requestId = requestId;
            this.options = options;
            this.procedure = procedure;
            this.type = message_type_1.WampType.REGISTER;
        }
        toTransportFormat() {
            return [this.type, this.requestId, this.options, this.procedure];
        }
    }
    WampMessage.Register = Register;
    /**
     * A class representing an unknown message.
     */
    class Unknown {
        constructor(raw) {
            this.raw = raw;
            this.type = message_type_1.WampType._Unknown;
        }
        toTransportFormat() {
            return this.raw;
        }
    }
    WampMessage.Unknown = Unknown;
    /**
     * A class representing the UNREGISTER message.
     */
    class Unregister {
        constructor(requestId, registration) {
            this.requestId = requestId;
            this.registration = registration;
            this.type = message_type_1.WampType.UNREGISTER;
        }
        toTransportFormat() {
            return [this.type, this.requestId, this.registration];
        }
    }
    WampMessage.Unregister = Unregister;
    /**
     * A class representing the YIELD message.
     */
    class Yield {
        constructor(invocationId, options, args, kwargs) {
            this.invocationId = invocationId;
            this.options = options;
            this.args = args;
            this.kwargs = kwargs;
            this.type = message_type_1.WampType.YIELD;
        }
        toTransportFormat() {
            return [this.type, this.invocationId, this.options, ...argsKwargsArray(this.args, this.kwargs)];
        }
    }
    WampMessage.Yield = Yield;
    /**
     * A class representing the WELCOME message.
     */
    class Welcome {
        constructor(sessionId, details) {
            this.sessionId = sessionId;
            this.details = details;
            this.type = message_type_1.WampType.WELCOME;
        }
        toTransportFormat() {
            return [message_type_1.WampType.WELCOME, this.sessionId, this.details];
        }
    }
    WampMessage.Welcome = Welcome;
    /**
     * A class representing the PUBLISHED message.
     */
    class Published {
        constructor(publishReqId, publicationId) {
            this.publishReqId = publishReqId;
            this.publicationId = publicationId;
            this.type = message_type_1.WampType.PUBLISHED;
        }
        toTransportFormat() {
            return [message_type_1.WampType.PUBLISHED, this.publishReqId, this.publicationId];
        }
    }
    WampMessage.Published = Published;
    /**
     * A class representing the SUBSCRIBED message.
     */
    class Subscribed {
        constructor(subscribeReqId, subscriptionId) {
            this.subscribeReqId = subscribeReqId;
            this.subscriptionId = subscriptionId;
            this.type = message_type_1.WampType.SUBSCRIBED;
        }
        toTransportFormat() {
            return [message_type_1.WampType.SUBSCRIBED, this.subscribeReqId, this.subscriptionId];
        }
    }
    WampMessage.Subscribed = Subscribed;
    /**
     * A class representing the UNSUBSCRIBED message.
     */
    class Unsubscribed {
        constructor(unsubscribeReqId) {
            this.unsubscribeReqId = unsubscribeReqId;
            this.type = message_type_1.WampType.UNSUBSCRIBED;
        }
        toTransportFormat() {
            return [message_type_1.WampType.UNSUBSCRIBED, this.unsubscribeReqId];
        }
    }
    WampMessage.Unsubscribed = Unsubscribed;
    /**
     * A class representing the EVENT message.
     */
    class Event {
        constructor(subscriptionId, publicationId, details, args, kwargs) {
            this.subscriptionId = subscriptionId;
            this.publicationId = publicationId;
            this.details = details;
            this.args = args;
            this.kwargs = kwargs;
            this.type = message_type_1.WampType.EVENT;
            this.args = this.args || [];
            this.kwargs = this.kwargs || {};
        }
        toTransportFormat() {
            return [message_type_1.WampType.EVENT, this.subscriptionId, this.publicationId, this.details, ...argsKwargsArray(this.args, this.kwargs)];
        }
    }
    WampMessage.Event = Event;
    /**
     * A class representing the RESULT message.
     */
    class Result {
        constructor(callReqId, details, args, kwargs) {
            this.callReqId = callReqId;
            this.details = details;
            this.args = args;
            this.kwargs = kwargs;
            this.type = message_type_1.WampType.RESULT;
        }
        toTransportFormat() {
            return [message_type_1.WampType.RESULT, this.callReqId, this.details, ...argsKwargsArray(this.args, this.kwargs)];
        }
    }
    WampMessage.Result = Result;
    /**
     * A class representing the REGISTERED message.
     */
    class Registered {
        constructor(registerReqId, registrationId) {
            this.registerReqId = registerReqId;
            this.registrationId = registrationId;
            this.type = message_type_1.WampType.REGISTERED;
        }
        toTransportFormat() {
            return [message_type_1.WampType.REGISTERED, this.registerReqId, this.registrationId];
        }
    }
    WampMessage.Registered = Registered;
    /**
     * A class representing the UNREGISTERED message.
     */
    class Unregistered {
        constructor(unregisterReqId) {
            this.unregisterReqId = unregisterReqId;
            this.type = message_type_1.WampType.UNREGISTERED;
        }
        toTransportFormat() {
            return [message_type_1.WampType.UNREGISTERED, this.unregisterReqId];
        }
    }
    WampMessage.Unregistered = Unregistered;
    /**
     * A class representing the INVOCATION message.
     */
    class Invocation {
        constructor(requestId, registrationId, options, args, kwargs) {
            this.requestId = requestId;
            this.registrationId = registrationId;
            this.options = options;
            this.args = args;
            this.kwargs = kwargs;
            this.type = message_type_1.WampType.INVOCATION;
        }
        toTransportFormat() {
            return [message_type_1.WampType.INVOCATION, this.requestId, this.registrationId, this.options, ...argsKwargsArray(this.args, this.kwargs)];
        }
    }
    WampMessage.Invocation = Invocation;
    /**
     * A class representing the CHALLENGE message.
     */
    class Challenge {
        constructor(authMethod, extra) {
            this.authMethod = authMethod;
            this.extra = extra;
            this.type = message_type_1.WampType.CHALLENGE;
        }
        toTransportFormat() {
            return [message_type_1.WampType.CHALLENGE, this.authMethod, this.extra];
        }
    }
    WampMessage.Challenge = Challenge;
    /**
     * A class representing the CANCEL message.
     */
    class Cancel {
        constructor(callRequestId, options) {
            this.callRequestId = callRequestId;
            this.options = options;
            this.type = message_type_1.WampType.CANCEL;
        }
        toTransportFormat() {
            return [this.type, this.callRequestId, this.options];
        }
    }
    WampMessage.Cancel = Cancel;
    /**
     * A class representing the INTERRUPT message.
     */
    class Interrupt {
        constructor(callRequestId, options) {
            this.callRequestId = callRequestId;
            this.options = options;
            this.type = message_type_1.WampType.INTERRUPT;
        }
        toTransportFormat() {
            return [message_type_1.WampType.INTERRUPT, this.callRequestId, this.options];
        }
    }
    WampMessage.Interrupt = Interrupt;
    /**
     * A class representing the AUTHENTICATE message.
     */
    class Authenticate {
        constructor(signature, extra) {
            this.signature = signature;
            this.extra = extra;
            this.type = message_type_1.WampType.AUTHENTICATE;
        }
        toTransportFormat() {
            return [this.type, this.signature, this.extra];
        }
    }
    WampMessage.Authenticate = Authenticate;
})(WampMessage = exports.WampMessage || (exports.WampMessage = {}));
//# sourceMappingURL=messages.js.map