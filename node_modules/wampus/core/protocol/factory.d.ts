import { HelloDetails, WampCallOptions, WampCancelOptions, WampEventOptions, WampInvocationOptions, WampPublishOptions, WampRegisterOptions, WampResultOptions, WampSubscribeOptions, WampYieldOptions, WelcomeDetails } from "./options";
import { WampArray, WampId, WampMessage, WampObject, WampUriString } from "./messages";
import { WampType } from "./message.type";
export interface MessageFactoryConfig {
    requestId(): number;
}
/**
 * A helper class for creating commonly used message objects and embedding them with request IDs.
 */
export declare class MessageFactory {
    private _config;
    constructor(_config: MessageFactoryConfig);
    hello(realm: string, details: HelloDetails): WampMessage.Hello;
    abort(details: WampObject, reason: WampUriString): WampMessage.Abort;
    call(options: WampCallOptions, procedure: WampUriString, args?: WampArray, kwargs?: any): WampMessage.Call;
    publish(options: WampPublishOptions, topic: WampUriString, args?: WampArray, kwargs?: WampObject): WampMessage.Publish;
    subscribe(options: WampSubscribeOptions, topic: WampUriString): WampMessage.Subscribe;
    unsubscribe(subscription: WampId): WampMessage.Unsubscribe;
    register(options: WampRegisterOptions, procedure: WampUriString): WampMessage.Register;
    error(sourceType: WampType, requestId: WampId, details: WampObject, reason: WampUriString, args?: WampArray, kwargs?: WampObject): WampMessage.Error;
    unregister(registration: WampId): WampMessage.Unregister;
    yield(invocationId: WampId, options: WampYieldOptions, args?: WampArray, kwargs?: WampObject): WampMessage.Yield;
    cancel(callRequestId: WampId, options: WampCancelOptions): WampMessage.Cancel;
    authenticate(signature: string, options: object): WampMessage.Authenticate;
    goodbye(details: WampObject, reason: WampUriString): WampMessage.Goodbye;
    unregistered(reqId: WampId): WampMessage.Unregistered;
    result(callReqId: WampId, details: WampResultOptions, args?: WampArray, kwargs?: WampObject): WampMessage.Result;
    registered(registerReqId: WampId): WampMessage.Registered;
    challenge(authMethod: string, extra: WampObject): WampMessage.Challenge;
    subscribed(subscribeReqId: WampId): WampMessage.Subscribed;
    event(subscriptionId: WampId, details?: WampEventOptions, args?: WampArray, kwargs?: WampObject): WampMessage.Event;
    invocation(registrationId: WampId, options?: WampInvocationOptions, args?: WampArray, kwargs?: WampObject): WampMessage.Invocation;
    welcome(details: WelcomeDetails): WampMessage.Welcome;
    unsubscribed(unsubscribeReqId: WampId): WampMessage.Unsubscribed;
}
