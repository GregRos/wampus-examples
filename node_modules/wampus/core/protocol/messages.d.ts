import { WampType } from "./message.type";
import { HelloDetails, WampCallOptions, WampCancelOptions, WampEventOptions, WampInvocationOptions, WampPublishOptions, WampRegisterOptions, WampResultOptions, WampSubscribeOptions, WampYieldOptions, WelcomeDetails } from "./options";
/**
 * An integer matching the WAMP ID specification.
 */
export declare type WampId = number;
/**
 * A string matching the WAMP URI specification.
 */
export declare type WampUriString = string;
/**
 * A basic primitive value that can appear in WAMP messages: a string, a number, an ID, or a URI.
 */
export declare type WampPrimitive = string | number | WampId | WampUriString;
/**
 * A dictionary that can appear in WAMP messages.
 */
export declare type WampObject = any;
/**
 * An array that can appear in WAMP messages.
 */
export declare type WampArray = any[];
/**
 * An arbitrary WAMP message in raw array format.
 */
export declare type WampRawMessage = WampArray;
/**
 * An abstract interface for WAMP message classes to implement.
 */
export interface WampMessage {
    /**
     * The type of the WAMP message.
     */
    type: WampType;
    /**
     * Transforms the WAMP message object to raw array format.
     */
    toTransportFormat(): WampRawMessage;
}
/**
 * Namespace for all WAMP protocol message objects.
 */
export declare module WampMessage {
    /**
     * A class representing the CALL message.
     */
    class Call implements WampMessage {
        requestId: WampId;
        options: WampCallOptions;
        procedure: WampUriString;
        args?: WampArray;
        kwargs?: WampObject;
        type: WampType;
        constructor(requestId: WampId, options: WampCallOptions, procedure: WampUriString, args?: WampArray, kwargs?: WampObject);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the ERROR message.
     */
    class Error implements WampMessage {
        errSourceType: WampType;
        errSourceId: WampId;
        details: WampObject;
        error: WampUriString;
        args?: WampArray;
        kwargs?: WampObject;
        type: WampType;
        constructor(errSourceType: WampType, errSourceId: WampId, details: WampObject, error: WampUriString, args?: WampArray, kwargs?: WampObject);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the HELLO message.
     */
    class Hello implements WampMessage {
        realm: string;
        details: HelloDetails;
        type: WampType;
        constructor(realm: string, details: HelloDetails);
        toTransportFormat(): (string | HelloDetails | WampType)[];
    }
    /**
     * A class representing the ABORT message.
     */
    class Abort implements WampMessage {
        details: WampObject;
        reason: WampUriString;
        type: WampType;
        constructor(details: WampObject, reason: WampUriString);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the GOODBYE message.
     */
    class Goodbye implements WampMessage {
        details: WampObject;
        reason: WampUriString;
        type: WampType;
        constructor(details: WampObject, reason: WampUriString);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the PUBLISH message.
     */
    class Publish implements WampMessage {
        requestId: WampId;
        options: WampPublishOptions;
        topic: WampUriString;
        args?: WampArray;
        kwargs?: WampObject;
        type: WampType;
        constructor(requestId: WampId, options: WampPublishOptions, topic: WampUriString, args?: WampArray, kwargs?: WampObject);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the SUBSCRIBE message.
     */
    class Subscribe implements WampMessage {
        requestId: WampId;
        options: WampSubscribeOptions;
        topic: WampUriString;
        type: WampType;
        constructor(requestId: WampId, options: WampSubscribeOptions, topic: WampUriString);
        toTransportFormat(): (string | number | WampSubscribeOptions)[];
    }
    /**
     * A class representing the UNSUBSCRIBE message.
     */
    class Unsubscribe implements WampMessage {
        requestId: WampId;
        subscription: WampId;
        type: WampType;
        constructor(requestId: WampId, subscription: WampId);
        toTransportFormat(): number[];
    }
    /**
     * A class representing the REGISTER message.
     */
    class Register {
        requestId: WampId;
        options: WampRegisterOptions;
        procedure: WampUriString;
        type: WampType;
        constructor(requestId: WampId, options: WampRegisterOptions, procedure: WampUriString);
        toTransportFormat(): (string | number | WampRegisterOptions)[];
    }
    /**
     * A class representing an unknown message.
     */
    class Unknown {
        raw: WampRawMessage;
        type: WampType;
        constructor(raw: WampRawMessage);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the UNREGISTER message.
     */
    class Unregister {
        requestId: WampId;
        registration: WampId;
        type: WampType;
        constructor(requestId: WampId, registration: WampId);
        toTransportFormat(): number[];
    }
    /**
     * A class representing the YIELD message.
     */
    class Yield implements WampMessage {
        invocationId: WampId;
        options: WampYieldOptions;
        args?: WampArray;
        kwargs?: WampObject;
        type: WampType;
        constructor(invocationId: WampId, options: WampYieldOptions, args?: WampArray, kwargs?: WampObject);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the WELCOME message.
     */
    class Welcome implements WampMessage {
        sessionId: WampId;
        details: WelcomeDetails;
        type: WampType;
        constructor(sessionId: WampId, details: WelcomeDetails);
        toTransportFormat(): (number | WelcomeDetails)[];
    }
    /**
     * A class representing the PUBLISHED message.
     */
    class Published implements WampMessage {
        publishReqId: WampId;
        publicationId: WampId;
        type: WampType;
        constructor(publishReqId: WampId, publicationId: WampId);
        toTransportFormat(): number[];
    }
    /**
     * A class representing the SUBSCRIBED message.
     */
    class Subscribed implements WampMessage {
        subscribeReqId: WampId;
        subscriptionId: WampId;
        type: WampType;
        constructor(subscribeReqId: WampId, subscriptionId: WampId);
        toTransportFormat(): number[];
    }
    /**
     * A class representing the UNSUBSCRIBED message.
     */
    class Unsubscribed implements WampMessage {
        unsubscribeReqId: WampId;
        type: WampType;
        constructor(unsubscribeReqId: WampId);
        toTransportFormat(): number[];
    }
    /**
     * A class representing the EVENT message.
     */
    class Event implements WampMessage {
        subscriptionId: WampId;
        publicationId: WampId;
        details: WampEventOptions;
        args?: WampArray;
        kwargs?: WampObject;
        type: WampType;
        constructor(subscriptionId: WampId, publicationId: WampId, details: WampEventOptions, args?: WampArray, kwargs?: WampObject);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the RESULT message.
     */
    class Result implements WampMessage {
        callReqId: WampId;
        details: WampResultOptions;
        args?: WampArray;
        kwargs?: WampObject;
        type: WampType;
        constructor(callReqId: WampId, details: WampResultOptions, args?: WampArray, kwargs?: WampObject);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the REGISTERED message.
     */
    class Registered implements WampMessage {
        registerReqId: WampId;
        registrationId: WampId;
        type: WampType;
        constructor(registerReqId: WampId, registrationId: WampId);
        toTransportFormat(): number[];
    }
    /**
     * A class representing the UNREGISTERED message.
     */
    class Unregistered implements WampMessage {
        unregisterReqId: WampId;
        type: WampType;
        constructor(unregisterReqId: WampId);
        toTransportFormat(): number[];
    }
    /**
     * A class representing the INVOCATION message.
     */
    class Invocation implements WampMessage {
        requestId: WampId;
        registrationId: WampId;
        options: WampInvocationOptions;
        args?: WampArray;
        kwargs?: WampObject;
        type: WampType;
        constructor(requestId: WampId, registrationId: WampId, options: WampInvocationOptions, args?: WampArray, kwargs?: WampObject);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the CHALLENGE message.
     */
    class Challenge implements WampMessage {
        authMethod: string;
        extra: WampObject;
        type: WampType;
        constructor(authMethod: string, extra: WampObject);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the CANCEL message.
     */
    class Cancel implements WampMessage {
        callRequestId: WampId;
        options: WampCancelOptions;
        type: WampType;
        constructor(callRequestId: WampId, options: WampCancelOptions);
        toTransportFormat(): (number | WampCancelOptions)[];
    }
    /**
     * A class representing the INTERRUPT message.
     */
    class Interrupt implements WampMessage {
        callRequestId: WampId;
        options: WampObject;
        type: WampType;
        constructor(callRequestId: WampId, options: WampObject);
        toTransportFormat(): any[];
    }
    /**
     * A class representing the AUTHENTICATE message.
     */
    class Authenticate implements WampMessage {
        signature: string;
        extra: WampObject;
        type: WampType;
        constructor(signature: string, extra: WampObject);
        toTransportFormat(): any[];
    }
    /**
     * A union representing any specific WAMP protocol message.
     */
    type Any = Cancel | Unknown | Interrupt | Authenticate | Challenge | Hello | Welcome | Abort | Goodbye | Error | Publish | Published | Subscribe | Subscribed | Unsubscribe | Unsubscribed | Event | Call | Result | Register | Registered | Unregister | Unregistered | Invocation | Yield;
}
