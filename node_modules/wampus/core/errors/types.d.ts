import { WampArray, WampObject } from "../protocol/messages";
/**
 * The base class for errors thrown by the Wampus library.
 */
export declare abstract class WampusError extends Error {
    name: string;
    constructor(message: string, props: object);
}
/**
 * Thrown when an argument supplied to a function was invalid.
 */
export declare class WampusInvalidArgument extends WampusError {
    constructor(message: string, props: object);
}
/**
 * Thrown when a network issue has prevented an action from completing, such as:
 * 1. A transport issue
 * 2. A WAMP protocol violation.
 * 3. A valid WAMP response with the `network_failure` error code.
 */
export declare class WampusNetworkError extends WampusError {
    constructor(message: string, props?: Record<string, any>);
}
/**
 * Thrown when the operation the caller tried to perform was invalid, such as:
 * 1. Trying to register a procedure with an invalid name.
 * 2. Trying to use a feature that wasn't enabled for the session.
 * 3. A valid WAMP response with an appropriate error code.
 */
export declare class WampusIllegalOperationError extends WampusError {
}
/**
 * Thrown when a WAMP operation succeeds with an error state, such as if the target of an RPC call threw an exception or was cancelled.
 */
export declare class WampusInvocationError extends WampusError {
    args: WampArray;
    kwargs: WampObject;
    error: string;
    details: any;
}
/**
 * Thrown when a WAMP RPC call is canceled.
 */
export declare class WampusInvocationCanceledError extends WampusError {
}
