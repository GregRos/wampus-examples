"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const template = require("string-template");
const object_1 = require("../../utils/object");
/**
 * The base class for errors thrown by the Wampus library.
 */
class WampusError extends Error {
    constructor(message, props) {
        super(template(message, props || {}));
        this.name = this.constructor.name;
        object_1.ObjectHelpers.assignKeepDescriptor(this, props);
        object_1.ObjectHelpers.makeNonEnumerable(this, "name");
    }
}
exports.WampusError = WampusError;
/**
 * Thrown when an argument supplied to a function was invalid.
 */
class WampusInvalidArgument extends WampusError {
    constructor(message, props) {
        super(message, props);
    }
}
exports.WampusInvalidArgument = WampusInvalidArgument;
/**
 * Thrown when a network issue has prevented an action from completing, such as:
 * 1. A transport issue
 * 2. A WAMP protocol violation.
 * 3. A valid WAMP response with the `network_failure` error code.
 */
class WampusNetworkError extends WampusError {
    constructor(message, props) {
        super(message, props || {});
    }
}
exports.WampusNetworkError = WampusNetworkError;
/**
 * Thrown when the operation the caller tried to perform was invalid, such as:
 * 1. Trying to register a procedure with an invalid name.
 * 2. Trying to use a feature that wasn't enabled for the session.
 * 3. A valid WAMP response with an appropriate error code.
 */
class WampusIllegalOperationError extends WampusError {
}
exports.WampusIllegalOperationError = WampusIllegalOperationError;
/**
 * Thrown when a WAMP operation succeeds with an error state, such as if the target of an RPC call threw an exception or was cancelled.
 */
class WampusInvocationError extends WampusError {
}
exports.WampusInvocationError = WampusInvocationError;
object_1.ObjectHelpers.makeEverythingNonEnumerableExcept(WampusInvocationError.prototype, "kwargs", "args", "details");
/**
 * Thrown when a WAMP RPC call is canceled.
 */
class WampusInvocationCanceledError extends WampusError {
}
exports.WampusInvocationCanceledError = WampusInvocationCanceledError;
//# sourceMappingURL=types.js.map