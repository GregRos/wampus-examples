import { WampMessage } from "../protocol/messages";
import { WampusIllegalOperationError, WampusInvocationCanceledError, WampusInvocationError, WampusNetworkError } from "./types";
/**@internal*/
export declare enum ErrorLevel {
    Transport = "Transport",
    Wamp = "Wamp"
}
import WM = WampMessage;
/**@internal*/
export declare module Errs {
    function receivedProtocolViolation(source: WM.Any, error: WampMessage.Abort): WampusNetworkError;
    function routerDoesNotSupportFeature(source: WM.Any, feature: string): WampusIllegalOperationError;
    function optionNotAllowed(source: WampMessage.Any, err: WampMessage.Error): WampusIllegalOperationError;
    function sessionIsClosing(source: WM.Any): WampusNetworkError;
    module Handshake {
        function noAuthenticator(challenge: WampMessage.Challenge): WampusNetworkError;
        function unexpectedMessage(message: WampMessage.Any): WampusNetworkError;
        function unrecognizedError(abort: WampMessage.Abort): WampusIllegalOperationError;
        function closed(): WampusNetworkError;
        function noSuchRealm(realm: string, msg: WampMessage.Abort): WampusIllegalOperationError;
    }
    module Unregister {
        function registrationDoesntExist(procedure: string, err: WampMessage.Error): WampusIllegalOperationError;
        function other(name: string, err: WampMessage.Error): WampusIllegalOperationError;
    }
    module Register {
        function procedureAlreadyExists(name: string, err: WampMessage.Error): WampusIllegalOperationError;
        function error(name: string, err: WampMessage.Error): WampusIllegalOperationError;
        function cannotSendResultTwice(name: string): WampusIllegalOperationError;
        function doesNotSupportProgressReports(name: string): WampusIllegalOperationError;
        function resultIncorrectFormat(name: string, obj: any): WampusIllegalOperationError;
    }
    module Subscribe {
        function other(name: string, err: WampMessage.Error): WampusIllegalOperationError;
    }
    module Unsubscribe {
        function subDoesntExist(msg: WampMessage.Error, event: string): WampusIllegalOperationError;
        function other(msg: WampMessage.Error, event: string): WampusIllegalOperationError;
    }
    module Leave {
        function networkErrorOnAbort(err: WampusNetworkError): WampusNetworkError;
        function goodbyeTimedOut(): WampusNetworkError;
    }
    module Publish {
        function unknown(topic: string, err: WM.Error): WampusIllegalOperationError;
    }
    module Call {
        function noSuchProcedure(name: string, err: WM.Error): WampusIllegalOperationError;
        function noEligibleCallee(name: string, err: WM.Error): WampusIllegalOperationError;
        function errorResult(name: string, err: WampMessage.Error): WampusInvocationError;
        function other(name: string, err: WampMessage.Error): WampusIllegalOperationError;
        function invalidArgument(name: string, err: WampMessage.Error): WampusIllegalOperationError;
        function optionDisallowedDiscloseMe(name: string, err: WampMessage.Error): WampusIllegalOperationError;
        function canceled(name: string, err: WampMessage.Error): WampusInvocationCanceledError;
    }
    function notAuthorized(source: WampMessage.Any, msg: WampMessage.Error): WampusIllegalOperationError;
    function invalidUri(source: WM.Any, msg: WampMessage.Error): WampusIllegalOperationError;
    function networkFailure(source: WM.Any, msg: WampMessage.Error): WampusNetworkError;
    function sessionClosed(source: WM.Any): WampusNetworkError;
}
