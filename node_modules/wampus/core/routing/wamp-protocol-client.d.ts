import { WampPrimitive, WampRawMessage } from "../protocol/messages";
import { PrefixRouter } from "./prefix-router";
import { Transport } from "../transport/transport";
import { Observable } from "rxjs";
/**
 * A message-based WAMP protocol client that allows sending WAMP messages and receiving them.
 */
export declare class WampProtocolClient<T> {
    transport: Transport;
    private _onClosed;
    private _onUnknownMessage;
    _router: PrefixRouter<T>;
    private _parser;
    /**
     * Use [[WampProtocolClient.create]].
     * @param {never} never
     */
    constructor(never: never);
    /**
     * Creates an instance of the [[WampProtocolClient]].
     * @param transport The transport used to send and receive messages.
     * @param selector Used to transform messages from a raw array format to an object format.
     * @returns WampProtocolClient<T>
     */
    static create<T>(transport: Transport, selector: (x: WampRawMessage) => T): WampProtocolClient<T>;
    private _defaultRoute;
    /**
     * An observable that notifies when the underlying transport is closed.
     */
    readonly onClosed: Observable<object>;
    private _setupRouter;
    /**
     * Creates a cold observable that, when subscribed to, will send the given WAMP message via the transport and complete once the message has been sent.
     * @param {WampMessage.Any} msg The message to send.
     */
    send$(msg: T & {
        toTransportFormat(): WampRawMessage;
    }): Observable<any>;
    /**
     * When subscribed to, creates a route for all protocol messages.
     * When unsubscribed, deletes the route.
     * @returns {Observable<WampMessage.Any>}
     */
    readonly messages$: Observable<T>;
    /**
     * When subscribed to, creates a route for protocol messages with fields matching the given prefix.
     * When unsubscribed, deletes the route.
     * @param {WampArray} prefixKey
     * @returns {Observable<WampMessage.Any>}
     */
    expect$(prefixKey: WampPrimitive[]): Observable<T>;
    /**
     * When called, it will invalidate all existing routes by causing them to error with the given object.
     * This should be used when terminating a session in order to violate all routes.
     * @param error
     */
    invalidateAllRoutes(error: Error): void;
    /**
     * Like [[expect$]], except that this defines several routes with a union.
     * @see expect$
     * @param routes
     */
    expectAny$<T>(...routes: WampPrimitive[][]): Observable<T>;
}
