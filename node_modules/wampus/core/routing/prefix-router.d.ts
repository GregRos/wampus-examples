import { WampPrimitive } from "../protocol/messages";
/**
 * A route registration.
 */
export declare type PrefixRoute<T> = {
    /**
     * The prefix key for matching the route.
     */
    readonly key: WampPrimitive[];
    /**
     * Used to notify a route a message matching its key has been received.
     * @param x The argument.
     */
    next?(x: T): void;
    /**
     * Notifies a route it should complete.
     */
    complete?(): void;
    /**
     * Notifies a route it should error.
     * @param err The error to error with.
     */
    error?(err: Error): void;
};
/**
 * A component that routes WAMP protocol messages to code that expects them.
 */
export declare class PrefixRouter<T> {
    private _root;
    /**
     * Returns the total number of registered routes.
     */
    count(): any;
    /**
     * Returns all routes.
     */
    matchAll(): any[];
    /**
     * Matches routes where the given key is a prefix of the route's key. Reverse matching.
     * @param key The given key to match against the routes.
     */
    reverseMatch(key: WampPrimitive[]): any[];
    /**
     * Matches all routes where the route's key is a prefix of the given key.
     * @param keys
     */
    match(keys: WampPrimitive[]): PrefixRoute<T>[];
    /**
     * Inserts route into the router.
     * @param target The prefix route.
     */
    insertRoute(target: PrefixRoute<T>): void;
    /**
     * Removes a route from the internal index. Note that this won't do anything to the route object itself, so it may still expect input.
     * @param target The route to remove, by reference.
     */
    removeRoute(target: PrefixRoute<T>): void;
}
