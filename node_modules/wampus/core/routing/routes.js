"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const message_type_1 = require("../protocol/message.type");
/**
 * A set of prefix key routes used to identify common routes messages.
 * @see [WAMP Basic Profile]{@link https://wamp-proto.org/_static/wamp_latest.html#message-definitions}
 * @see [WAMP Advanced Profile]{@link https://wamp-proto.org/_static/wamp_latest.html#message-definitions-0}
 */
var Routes;
(function (Routes) {
    Routes.goodbye = [message_type_1.WampType.GOODBYE];
    Routes.abort = [message_type_1.WampType.ABORT];
    function error(type, param2) {
        return param2 != null ? [message_type_1.WampType.ERROR, type, param2] : [message_type_1.WampType.ERROR, type];
    }
    Routes.error = error;
    function published(publishReqId) {
        return [message_type_1.WampType.PUBLISHED, publishReqId];
    }
    Routes.published = published;
    function subscribed(subReqId) {
        return [message_type_1.WampType.SUBSCRIBED, subReqId];
    }
    Routes.subscribed = subscribed;
    function unsubscribed(unsubReqId) {
        return [message_type_1.WampType.UNSUBSCRIBED, unsubReqId];
    }
    Routes.unsubscribed = unsubscribed;
    function event(subId) {
        return [message_type_1.WampType.EVENT, subId];
    }
    Routes.event = event;
    function registered(registerReqId) {
        return [message_type_1.WampType.REGISTERED, registerReqId];
    }
    Routes.registered = registered;
    function unregistered(unregisterReqId) {
        return [message_type_1.WampType.UNREGISTERED, unregisterReqId];
    }
    Routes.unregistered = unregistered;
    function invocation(registrationId) {
        // NOTE: This isn't the actual order of the fields for an INVOCATION message.
        // The fields need to be reordered in this one special case. Indexes 1, 2 must be switched.
        return [message_type_1.WampType.INVOCATION, registrationId];
    }
    Routes.invocation = invocation;
    function result(reqId) {
        return [message_type_1.WampType.RESULT, reqId];
    }
    Routes.result = result;
})(Routes = exports.Routes || (exports.Routes = {}));
//# sourceMappingURL=routes.js.map