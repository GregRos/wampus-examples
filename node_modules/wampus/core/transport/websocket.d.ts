import { TransportEvent, Transport } from "./transport";
import { Serializer } from "../serializer/serializer";
import { Observable } from "rxjs";
export interface WebsocketTransportConfig {
    url: string;
    serializer: Serializer;
    timeout?: number;
    forceProtocol?: string;
}
export declare class WebsocketTransport implements Transport {
    private _config;
    private _ws;
    private _expectingClose;
    readonly name: string;
    events$: Observable<TransportEvent>;
    /**
     * Use `WebsocketTransport.create` instead.
     * @param {never} never
     */
    constructor(never: never);
    /**
     * Creates a COLD stream that will create a [[WebsocketTransport]] when subscribed to.
     * The [[WebsocketTransport]] will be automatically closed when the subscription ends.
     * @param {WebsocketTransportConfig} config
     * @returns {Observable<WebsocketTransport>}
     */
    static create(config: WebsocketTransportConfig): Promise<WebsocketTransport>;
    readonly isActive: boolean;
    close(x?: {
        code?: number;
        data?: any;
    }): Promise<void>;
    send$(msg: object): Observable<any>;
}
