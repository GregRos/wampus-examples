import * as Core from "../../core/session/ticket";
import { WampusSendResultArguments } from "../../core/session/message-arguments";
import { AbstractWampusSessionServices } from "../services";
import { RegistrationTicket } from "./registration-ticket";
import { WampInvocationOptions } from "../../core/protocol/options";
import { WampArray, WampObject } from "../../core/protocol/messages";
/**
 * A ticket for the invocation of a procedure, on the callee's side.
 */
export declare class InvocationTicket {
    private _base;
    private _services;
    private _source;
    /**
     * The sequential arguments.
     */
    readonly args: WampArray;
    /**
     * The ID of the invocation.
     */
    readonly invocationId: number;
    /**
     * The named arguments.
     */
    readonly kwargs: WampObject;
    /**
     * The WAMP protocol options.
     */
    readonly options: WampInvocationOptions;
    /**
     * The procedure name.
     */
    readonly name: string;
    /**
     * @internal
     * @param _base
     * @param _services
     * @param _source
     */
    constructor(_base: Core.InvocationTicket, _services: AbstractWampusSessionServices, _source: RegistrationTicket);
    /**
     * Whether this invocation has already received the final result.
     */
    readonly isHandled: boolean;
    /**
     * The source {{RegistrationTicket}} for the procedure that created this invocation ticket.
     */
    readonly source: RegistrationTicket;
    private _applyOutputTransforms;
    private _error;
    /**
     * Checks if this call has been cancelled, and continues to wait for {{time}} milliseconds for a cancellation request.
     * @param time The time to wait for. Can be 0.
     * @returns A promise that resolves to a {{CancellationTicket}} if one is found, or no value otherwise.
     */
    waitForCancel(time: any): Promise<CancellationTicket>;
    /**
     * @internal
     * @param handler
     * @private
     */
    _handle(handler: ProcedureHandler): void;
    /**
     * Sends a progress report to the caller.
     * The message sent by this method will have its `options.progress` field set to true.
     * @param msg The contents of the progress message.
     */
    progress(msg: WampusSendResultArguments): Promise<void>;
    private _return;
}
export interface CancellationTicket extends Core.CancellationToken {
    throw(): never;
}
export declare type ProcedureHandler = (ticket: InvocationTicket) => Promise<WampusSendResultArguments>;
