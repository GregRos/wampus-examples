"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const operators_1 = require("rxjs/operators");
const invocation_ticket_1 = require("./invocation-ticket");
const ticket_1 = require("./ticket");
const object_1 = require("../../utils/object");
/**
 * A ticket for a procedure registration.
 */
class RegistrationTicket extends ticket_1.Ticket {
    constructor(never) {
        super();
        this.trace = {
            created: null
        };
    }
    /**
     * @internal
     * @param registering
     * @param services
     */
    static create(registering, services) {
        return __awaiter(this, void 0, void 0, function* () {
            let trace = services.stackTraceService.capture(RegistrationTicket.create);
            let coreTicket = yield registering.catch(err => {
                if (trace)
                    err.trace = services.stackTraceService.format(err, trace);
                throw err;
            });
            let ticket = new RegistrationTicket(null);
            ticket.trace.created = trace;
            ticket._base = coreTicket;
            ticket._services = services;
            object_1.ObjectHelpers.makeEverythingNonEnumerableExcept(ticket);
            return ticket;
        });
    }
    /**
     * Info about the registration.
     */
    get info() {
        return this._base.info;
    }
    /**
     * Closes the registration.
     */
    close() {
        return this._base.close();
    }
    /**
     * @internal
     * @param handler
     * @private
     */
    _handle(handler) {
        this._invocations.subscribe(myTicket => {
            myTicket._handle(handler);
        });
    }
    get _invocations() {
        let myTrace = this._services.stackTraceService.capture(Object.getOwnPropertyDescriptor(RegistrationTicket.prototype, "_invocations").get);
        return this._base.invocations.pipe(operators_1.map(coreTicket => {
            let newTicket = new invocation_ticket_1.InvocationTicket(coreTicket, this._services, this);
            return newTicket;
        }), operators_1.catchError(err => {
            if (myTrace)
                err.stack = this._services.stackTraceService.format(err, myTrace);
            throw err;
        }));
    }
    /**
     * Whether the registration has been closed.
     */
    get isOpen() {
        return this._base.isOpen;
    }
}
exports.RegistrationTicket = RegistrationTicket;
object_1.ObjectHelpers.makeEverythingNonEnumerableExcept(invocation_ticket_1.InvocationTicket.prototype, "info");
//# sourceMappingURL=registration-ticket.js.map