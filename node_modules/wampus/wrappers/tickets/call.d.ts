/// <reference types="node" />
import * as Core from "../../core/session/ticket";
import { CallTicketInfo } from "../../core/session/ticket";
import { AbstractWampusSessionServices } from "../services";
import { CancelMode } from "../../core/protocol/options";
import { Observable } from "rxjs";
import { Ticket } from "./ticket";
import { CallResultData } from "./call-result";
import CallSite = NodeJS.CallSite;
/**
 * An in-progress RPC call via the WAMP protocol.
 */
export declare class CallTicket extends Ticket implements PromiseLike<CallResultData> {
    private _base;
    private _services;
    private _adapter;
    trace: {
        created: CallSite[];
    };
    private _replayProgress;
    /**
     * Should not be called from user code.
     * @param never
     */
    constructor(never: never);
    /**
     * Creates a new feature-wrapped call ticket using a base ticket and a set of services.
     * Should not normally be called from user code.
     * @param call The base ticket provided by the WampusCoreSession object.
     * @param services
     */
    static create(call: Core.CallTicket, services: AbstractWampusSessionServices): CallTicket;
    /**
     * Provides info about this RPC call.
     */
    readonly info: CallTicketInfo;
    /**
     * Whether this call has been finished.
     */
    readonly isOpen: boolean;
    /**
     * An observable that fires whenever a message is received from the callee.
     * Sends progress, error, and result messages.
     */
    readonly progress: Observable<CallResultData>;
    /**
     * Returns a promise that resolves with the final result of the call.
     */
    readonly result: Promise<CallResultData>;
    /**
     * Cancels the call, or if the call is already finished, does nothing.
     * @param cancelMode The type of the cancellation, as written in the WAMP specification.
     */
    close(cancelMode?: CancelMode): Promise<void>;
    /**
     * Removes a handler.
     * @param name The name of the event.
     * @param handler The handler function.
     */
    off(name: "data", handler: any): void;
    /**
     * Adds a handler.
     * @param name The name of the event.
     * @param handler The handler.
     */
    on(name: "data", handler: (x: CallResultData) => void): void;
    /**
     * Added so that this call ticket can be awaited or used as a promise.
     * @see Promise.then
     * @param onfulfilled
     * @param onrejected
     */
    then<TResult1 = CallResultData, TResult2 = never>(onfulfilled?: ((value: CallResultData) => (PromiseLike<TResult1> | TResult1)) | null | undefined, onrejected?: ((reason: any) => (PromiseLike<TResult2> | TResult2)) | null | undefined): PromiseLike<TResult1 | TResult2>;
    /**
     * Added so this call ticket can be awaited or used as a promise.
     * @see Promise.catch
     * @param onrejected
     */
    catch(onrejected: (reason: any) => any): Promise<any>;
}
