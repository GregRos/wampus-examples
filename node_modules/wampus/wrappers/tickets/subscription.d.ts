/// <reference types="node" />
import { Observable } from "rxjs";
import { WampusSubcribeArguments } from "../../core/session/message-arguments";
import * as Core from "../../core/session/ticket";
import { AbstractWampusSessionServices } from "../services";
import { Ticket } from "./ticket";
import CallSite = NodeJS.CallSite;
export interface EventInvocationData extends Core.EventData {
    readonly source: SubscriptionTicket;
}
/**
 * A ticket for a topic subscription.
 */
export declare class SubscriptionTicket extends Ticket {
    trace: {
        created: CallSite[];
    };
    private _base;
    private _services;
    private _adapter;
    constructor(never: never);
    /**
     * A hot observable that emits all the events received by this subscription in real time.
     */
    readonly events: Observable<EventInvocationData>;
    /**
     * @internal
     * @param subscribing
     * @param services
     */
    static create(subscribing: Promise<Core.SubscriptionTicket>, services: AbstractWampusSessionServices): Promise<SubscriptionTicket>;
    /**
     * Info about this subscription.
     */
    readonly info: WampusSubcribeArguments & {
        readonly subscriptionId: number;
    };
    /**
     * Whether this subscription is still active.
     */
    readonly isOpen: boolean;
    /**
     * Closes this subscription.
     */
    close(): Promise<void>;
    /**
     * Removes an event handler from this ticket.
     * @param name The name of the event.
     * @param handler The handler
     */
    off(name: "event", handler: any): void;
    /**
     * Adds an event handler to this ticket.
     * @param name The name of the event.
     * @param handler The handler
     */
    on(name: "event", handler: (x: EventInvocationData) => void): void;
}
