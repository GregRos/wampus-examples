/// <reference types="node" />
import * as Core from "../../core/session/ticket";
import { AbstractWampusSessionServices } from "../services";
import { ProcedureHandler } from "./invocation-ticket";
import CallSite = NodeJS.CallSite;
import { WampusRegisterArguments } from "../../core";
import { Ticket } from "./ticket";
/**
 * A ticket for a procedure registration.
 */
export declare class RegistrationTicket extends Ticket {
    trace: {
        created: CallSite[];
    };
    private _base;
    private _services;
    constructor(never: never);
    /**
     * @internal
     * @param registering
     * @param services
     */
    static create(registering: Promise<Core.RegistrationTicket>, services: AbstractWampusSessionServices): Promise<RegistrationTicket>;
    /**
     * Info about the registration.
     */
    readonly info: WampusRegisterArguments & {
        readonly registrationId: number;
    };
    /**
     * Closes the registration.
     */
    close(): Promise<void>;
    /**
     * @internal
     * @param handler
     * @private
     */
    _handle(handler: ProcedureHandler): void;
    private readonly _invocations;
    /**
     * Whether the registration has been closed.
     */
    readonly isOpen: boolean;
}
