import { InvocationTicket } from "../tickets/invocation-ticket";
import { CallTicket } from "../tickets/call";
import { SubscriptionTicket } from "../tickets/subscription";
export declare type TransformationSource = InvocationTicket | CallTicket | SubscriptionTicket;
export interface TransformerControl<TIn, TOut> {
    recurse(subObject: TIn): TOut;
    next(value: TIn): TOut;
}
export interface TransformStep<TIn, TOut> {
    (value: TIn, ctx: TransformerControl<TIn, TOut>): TOut;
}
export declare module Transformation {
    function compile<TIn = any, TOut = any>(...steps: TransformStep<TIn, TOut>[]): (x: TIn) => TOut;
    function compile<TIn = any, TOut = any>(steps: TransformStep<TIn, TOut>[]): (x: TIn) => TOut;
}
export declare class StepByStepTransformer<TIn, TOut> {
    private _transforms;
    private _compiled;
    constructor();
    add(...ts: TransformStep<TIn, TOut>[]): void;
    readonly transform: (x: TIn) => TOut;
}
