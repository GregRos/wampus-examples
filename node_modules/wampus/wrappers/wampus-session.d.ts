import { WampusCallArguments, WampusPublishArguments, WampusRegisterArguments, WampusSubcribeArguments } from "../core";
import { WampusCoreSession } from "../core/session/core-session";
import { AbstractWampusSessionServices } from "./services";
import { RegistrationTicket } from "./tickets/registration-ticket";
import { CallTicket } from "./tickets/call";
import { SubscriptionTicket } from "./tickets/subscription";
import { ProcedureHandler } from "./tickets/invocation-ticket";
import { WampRegisterOptions } from "../core/protocol/options";
import { NewObjectInitializer } from "../common/common";
import { Ticket } from "./tickets/ticket";
export interface WampusProcedureDefinitions {
    [key: string]: ProcedureHandler | {
        options?: WampRegisterOptions;
        called: ProcedureHandler;
    };
}
export declare class WampusSession extends Ticket {
    private _core;
    /**
     * @internal
     */
    readonly _services: AbstractWampusSessionServices;
    constructor(_core: WampusCoreSession, initServices: NewObjectInitializer<AbstractWampusSessionServices>);
    /**
     * Gets the realm this session belongs to.
     */
    readonly realm: string;
    /**
     * Gets whether this session is still alive.
     */
    readonly isActive: boolean;
    /**
     * Gets information about this session.
     */
    readonly details: import("../core/protocol/options").WelcomeDetails;
    /**
     * Gets this session's ID.
     */
    readonly sessionId: number;
    /**
     * Exposes the WAMP protocol client used to send and receive protocol messages. This gives you lower-level control over the session.
     * Don't use it unless you know what you're doing.
     */
    readonly protocol: import("../core/routing/wamp-protocol-client").WampProtocolClient<import("../core/protocol/messages").WampMessage.Any>;
    /**
     * Closes this session.
     */
    close(): Promise<void>;
    /**
     * Calls a procedure via the WAMP protocol
     * @param wArgs All the information required to make the call.
     * @returns An awaitable call ticket that lets you receive progress from the call.
     */
    call(wArgs: WampusCallArguments): CallTicket;
    /**
     * Registers a procedure via the WAMP protocol.
     * @param wArgs All the information needed to register the procedure, including the backing callback.
     * @returns A promise that resolves to a registration ticket once the procedure has been registered.
     */
    register(wArgs: WampusRegisterArguments & {
        called: ProcedureHandler;
    }): Promise<RegistrationTicket>;
    /**
     * Registers multiple procedures based on an object specification.
     * @param procedures A procedure specification.
     * @see WampusProcedureDefinitions
     */
    registerAll(procedures: WampusProcedureDefinitions): Promise<Ticket>;
    /**
     * Subscribes to a topic via the WAMP protocol.
     * @param wArgs All the information needed to create the subscription.
     * @returns A promise that resolves to a subscription ticket that can be used to receive events.
     */
    topic(wArgs: WampusSubcribeArguments): Promise<SubscriptionTicket>;
    /**
     * Publishes an event via the WAMP protocol.
     * @param wArgs All the information needed to publish the event.
     * @returns A promise that resolves once the event has been published.
     */
    publish(wArgs: WampusPublishArguments): Promise<void>;
}
