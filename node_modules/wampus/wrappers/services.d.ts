/// <reference types="node" />
import { WampObject } from "../core/protocol/messages";
import { WampusSendErrorArguments } from "../core/session/message-arguments";
import { WampusInvocationError } from "../core/errors/types";
import CallSite = NodeJS.CallSite;
import { TransformStep, StepByStepTransformer } from "./services/recursive-transform";
export declare class TransformSet {
    objectToJson: StepByStepTransformer<any, any>;
    jsonToObject: StepByStepTransformer<any, any>;
    errorResponseToError: StepByStepTransformer<WampusInvocationError, Error>;
    errorToErrorResponse: StepByStepTransformer<Error, WampusSendErrorArguments>;
}
export declare type StackTraceService = {
    enabled: boolean;
    capture(ctor: Function): CallSite[];
    format(err: Error, callSites: CallSite[]): string;
};
export declare type JsonToRuntimeObject = TransformStep<WampObject, any>;
export declare type RuntimeObjectToJson = TransformStep<any, WampObject>;
export declare type ResponseToRuntimeError = TransformStep<WampusInvocationError, Error>;
export declare type RuntimeErrorToResponse = TransformStep<Error, WampusSendErrorArguments>;
export interface AbstractWampusSessionServices {
    transforms?: TransformSet;
    stackTraceService?: StackTraceService;
}
