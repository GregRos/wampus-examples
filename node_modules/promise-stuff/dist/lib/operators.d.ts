/**
 * @module promise-stuff
 */ /** */
import { AsyncCallback, BasicPromise, BasicPromiseConstructor } from "./definitions";
import { StaticOperators } from "./static-operators";
/**
 * A module that provides static bindings for functions implemented by [[ExtendedPromise]].
 */
export declare module Operators {
    /**
     * Returns a `StaticOperators` module, which provides static bindings for functions implemented by a [[ExtendedPromiseConstructor]].
     * The `StaticOperators` instance provides functions that use the constructor `ctor` internally.
     * @param {BasicPromiseConstructor<P extends BasicPromise<*>>} ctor The promise constructor for which to create an operators module.
     * @returns {StaticOperators<BasicPromise<*>>}
     * @constructor
     */
    function For<P extends BasicPromise<any>>(ctor: BasicPromiseConstructor<P>): StaticOperators<P>;
    /**
     * Static version of the `race` function.
     * @see [[ExtendedPromise.race]]
     */
    function race<P extends BasicPromise<T>, T = any>(promise: P, ...others: PromiseLike<T>[]): P;
    /**
     * Static version of the `and` function.
     * @see [[ExtendedPromise.and]]
     * @param {P} promise
     * @param {PromiseLike<T>} others
     * @returns {BasicPromise<*[]>} The return type of this function is meant to be `P<T[]>`, where `P` is the input promise type.
     */
    function and<P extends BasicPromise<T>, T = any>(promise: P, ...others: PromiseLike<T>[]): BasicPromise<any[]>;
    /**
     * Static version of the `fallback` function.
     * @see [[ExtendedPromise.fallback]]
     * @param {P} promise
     * @param {PromiseLike<T> | ((reason: any) => (PromiseLike<T> | T)) | T} others
     * @returns {P}
     */
    function fallback<P extends BasicPromise<T>, T = any>(promise: P, ...others: (PromiseLike<T> | T | ((reason: any) => (PromiseLike<T> | T)))[]): P;
    /**
     * Static version of the `delay` function.
     * @see [[ExtendedPromise.delay]]
     * @param {P} promise
     * @param {number | Date} time
     * @returns {P}
     */
    function delay<P extends BasicPromise<T>, T = any>(promise: P, time: number | Date): P;
    /**
     * Static version of the `each` function.
     * @see [[ExtendedPromise.each]]
     * @param {P} promise
     * @param {AsyncCallback<any, void>} action
     * @returns {P}
     */
    function each<P extends BasicPromise<T>, T = any>(promise: P, action: AsyncCallback<any, void>): P;
    /**
     * Static version of the `lastly` function.
     * @see [[ExtendedPromise.lastly]]
     * @param {P} promise
     * @param {AsyncCallback<any, void>} action
     * @returns {P}
     */
    function lastly<T, P extends BasicPromise<T>>(promise: P, action: AsyncCallback<any, void>): P;
    /**
     * Static version of the `mustNot` function.
     * @see [[ExtendedPromise.mustNot]]
     * @param {P} promise
     * @param {AsyncCallback<T, any>} failReason
     * @returns {P}
     */
    function mustNot<P extends BasicPromise<T>, T = any>(promise: P, failReason: AsyncCallback<T, any>): P;
    /**
     * Static version of the `stall` function.
     * @see [[ExtendedPromise.stall]]
     * @param {P} promise
     * @param {number | Date} time
     * @returns {P}
     */
    function stall<P extends BasicPromise<T>, T>(promise: P, time: number | Date): P;
    /**
     * Static version of the `timeout` function.
     * @see [[ExtendedPromise.timeout]]
     * @param {P} promise
     * @param {number | Date} time
     * @param {() => (PromiseLike<T> | T)} onTimeout
     * @returns {P}
     */
    function timeout<P extends BasicPromise<T>, T>(promise: P, time: number | Date, onTimeout?: () => T | PromiseLike<T>): P;
    /**
     * Static version of the `test` function.
     * @see [[ExtendedPromise.test]]
     * @param {P} promise
     * @returns {BasicPromise<boolean>} The return type is meant to be `P<boolean>`, where `P` is the promise type.
     */
    function test<P extends BasicPromise<T>, T>(promise: P): BasicPromise<boolean>;
    /**
     * Static version of the `invert` function.
     * @see [[ExtendedPromise.invert]]
     * @param {P} promise
     * @returns {BasicPromise<*>} The return type of this function is meant to be `P<any>`, where `P` is the promise type.
     */
    function invert<T, P extends BasicPromise<T>>(promise: P): BasicPromise<any>;
}
