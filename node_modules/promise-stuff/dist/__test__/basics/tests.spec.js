"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const ava_spec_1 = require("ava-spec");
const core_1 = require("../../lib/core");
const events_1 = require("events");
core_1.PromiseStuff.extendExisting(Promise);
let ExtendedPromise = Promise;
const from = ExtendedPromise.from;
const fromAsync = (f) => from(f());
class InternalError extends Error {
}
let resolveAfter3s = (v) => from(new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(v);
    }, 3000);
}));
let rejectAfter3s = (v) => from(new Promise((resolve, reject) => {
    setTimeout(() => {
        reject(v);
    }, 3000);
}));
ava_1.default("and", (t) => __awaiter(this, void 0, void 0, function* () {
    let two = yield resolveAfter3s(1).and(resolveAfter3s(1));
    t.deepEqual(two, [1, 1]);
}));
ava_1.default("cast", (t) => __awaiter(this, void 0, void 0, function* () {
    let o = {};
    let two = resolveAfter3s(o).cast();
    t.is(yield two, o);
}));
ava_1.default("wait", (t) => __awaiter(this, void 0, void 0, function* () {
    let firstDone = false;
    let secondDone = false;
    setTimeout(() => {
        firstDone = true;
    }, 498);
    let wait = ExtendedPromise.wait(498);
    setTimeout(() => {
        secondDone = true;
    }, 550);
    yield wait;
    t.deepEqual(firstDone, true);
    t.deepEqual(secondDone, false);
}));
ava_spec_1.describe("timeout", it => {
    it("success", (t) => __awaiter(this, void 0, void 0, function* () {
        let p = resolveAfter3s(1);
        let pt = p.timeout(new Date(Date.now() + 3500), () => Promise.reject(null));
        t.deepEqual(yield pt, 1);
    }));
    it("fail+resolve", (t) => __awaiter(this, void 0, void 0, function* () {
        let p = resolveAfter3s(1);
        let pt = yield p.timeout(new Date(Date.now() + 100), () => Promise.resolve(null));
        t.deepEqual(pt, null);
    }));
    it("fail + reject", (t) => __awaiter(this, void 0, void 0, function* () {
        let p = resolveAfter3s(1);
        let err = new InternalError();
        yield t.throws(p.timeout(new Date(Date.now() + 100), () => Promise.reject(err)), InternalError);
    }));
});
ava_1.default("soon", (t) => __awaiter(this, void 0, void 0, function* () {
    let start = Date.now();
    let end = yield ExtendedPromise.soon(() => Date.now());
    t.true(end - start <= 50);
}));
ava_1.default("never", (t) => __awaiter(this, void 0, void 0, function* () {
    let p = resolveAfter3s(1);
    let never = ExtendedPromise.never();
    let fst = yield Promise.race([p, never]);
    t.deepEqual(fst, 1);
}));
ava_spec_1.describe("create", it => {
    it("resolves", (t) => __awaiter(this, void 0, void 0, function* () {
        let p = yield ExtendedPromise.create((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            resolve(5);
        }));
        t.deepEqual(p, 5);
    }));
    it("rejects", (t) => __awaiter(this, void 0, void 0, function* () {
        let err = new InternalError();
        let p = ExtendedPromise.create((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            reject(err);
        }));
        yield t.throws(p, InternalError);
    }));
    it("executor rejects", (t) => __awaiter(this, void 0, void 0, function* () {
        let err = new InternalError();
        let p = ExtendedPromise.create((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            throw err;
        }));
        yield t.throws(p, InternalError);
    }));
});
ava_spec_1.describe("delay", it => {
    it("delay", (t) => __awaiter(this, void 0, void 0, function* () {
        let x = resolveAfter3s(5).delay(1000);
        let start = Date.now();
        let r = yield x;
        t.deepEqual(r, 5);
        let dif = Date.now() - start;
        t.true(dif >= 3995 && dif <= 4050);
    }));
});
ava_spec_1.describe("eventOnce", it => {
    it("EventEmitter", (t) => __awaiter(this, void 0, void 0, function* () {
        let ee = new events_1.EventEmitter();
        let p = yield ExtendedPromise.eventOnce(ee, "Hello").timeout(3000, () => Promise.resolve("TimedOut"));
        t.deepEqual(p, "TimedOut");
        let q = ExtendedPromise.eventOnce(ee, "Hello");
        ee.emit("Hello", "Hello");
        t.deepEqual(yield q, "Hello");
        ee.emit("Hello", "Goodbye");
        t.deepEqual(yield q, "Hello");
    }));
});
//# sourceMappingURL=tests.spec.js.map